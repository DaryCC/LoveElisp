#+title:Intro  de LISP 
#+author:dary.cc@gmail.com
#+OPTIONS: broken-links:t 
* Tabla de contenido :TOC:
- [[#funciones][Funciones]]
  - [[#f-con-argumentos][f con argumentos]]
    - [[#sumas][sumas]]
    - [[#suma-con-listas][Suma con listas]]
    - [[#factorial][factorial]]
    - [[#map][map]]
- [[#variables][Variables]]
- [[#inmutabilidad][Inmutabilidad]]

* Funciones
#+begin_src emacs-lisp :tangle yes :exports both
  (
   defun hi(nombre)
    (print
     (concatenate 'string "hola " nombre)
    )
  )

  (hi "Dary")
#+end_src

#+RESULTS:
: "hola Dary"


** f con argumentos
*** sumas
#+begin_src emacs-lisp :tangle yes :results both: exports both
  (
   defun sum(a b)
    (+ a b)
  )

  (sum 3 5)
#+end_src

#+RESULTS:
: 8

*** Suma con listas

La función ~reduce~ es parecido a la función reduce en *Python* y *JS*.
#+begin_src emacs-lisp :tangle yes :results both :exports both
  (
   defun sumL(l)
    (print (reduce '+ l)    )
  )

  (sumL '(1 2 3 4))
#+end_src

#+RESULTS:
: 10

*** factorial
#+begin_src emacs-lisp :tangle yes :results both :exports both
  (
   defun factorial(num)
    ( if (= num 0) 1
          (* num (factorial(- num 1)))
    )
  )

  (print (factorial 4))
#+end_src

#+RESULTS:
: 24

*** map
Lamda es una /función anónima/, ~maps~ es parecido a la función en *Python* y *JS*.
#+begin_src emacs-lisp :tangle yes :results both :exports both
  (
   defun doble(list num)
    ( mapcar
      (lambda (x) (* x num))
      list
      )
  )

  (print (doble '(1 2 3 4 ) 2))
#+end_src

#+RESULTS:
| 2 | 4 | 6 | 8 |

* Variables

#+begin_src emacs-lisp :tangle yes :results both :exports both
  (defvar name "Dary")
  (print name)
  (setq name "Dario")
  (print name)
#+end_src

#+RESULTS:
: Dary
#+RESULTS:
: Dario



* Inmutabilidad
La lista no modificia sus valores.
#+begin_src emacs-lisp :tangle yes :results both :exports both
  (defvar lista '(1 2 3 4 5 6 ))

  (defun show(lista)
    (loop for num in lista
          do (print num)
    )
  )


  (
   defun mul(list num)
   ( mapcar
     (lambda (x) (* x num))
     list
     )
   )

  (defvar numbers2 (mul lista 3))
  (show lista)
  (print "*****************")
  (show numbers2)
#+end_src

#+RESULTS:
#+begin_example

1

2

3

4

5

6

"*****************"

3

6

9

12

15

18
#+end_example




